worker_processes auto;

events {
    worker_connections 1024;
}

http {
    upstream telegram_bot {
        # Load balancing method - round-robin by default
        # Consider using ip_hash or sticky sessions if needed for your use case
        server bot-instance-1:8000;
        server bot-instance-2:8000;
        
        # Keep connections alive
        keepalive 32;
    }

    server {
        listen 80;
        server_name your-domain.com;
        
        # Redirect HTTP to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl;
        server_name your-domain.com;
        
        # SSL configuration
        ssl_certificate /etc/nginx/certs/fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers HIGH:!aNULL:!MD5;
        
        # Proxy settings
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";
        
        # Webhook endpoint - forward to one of the bot instances
        location /webhook {
            proxy_pass http://telegram_bot;
        }
        
        # Health check endpoint
        location /health {
            proxy_pass http://telegram_bot;
        }
    }
} 